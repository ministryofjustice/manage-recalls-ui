version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@3.2
  mem: circleci/rememborb@0.0.2
  slack: circleci/slack@4.4.2

executors:
  integration-tests:
    docker:
      - image: cimg/node:14.15-browsers
      - image: circleci/redis:buster
    working_directory: ~/app
  docker:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/app

parameters:
  docker-image-name:
    type: string
    default: quay.io/hmpps/${CIRCLE_PROJECT_REPONAME}
  alerts-slack-channel:
    type: string
    default: ppud-replacement-devs
  releases-slack-channel:
    type: string
    default: ppud-replacement-releases

jobs:
  build:
    executor:
      name: hmpps/node
      tag: 14.15-browsers
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            npm run build
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            npm run record-build-info
      - run: # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build-info.json
            - build
            - dist
            - .cache/Cypress

  check_outdated:
    executor:
      name: hmpps/node
      tag: 14.15-browsers
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm
          command: 'npm ci --no-audit'
      - run:
          name: Check version
          command: 'npm --version'
      - run:
          name: Run check
          command: 'npm outdated typescript govuk-frontend'
      - slack/notify:
          event: fail
          channel: << pipeline.parameters.alerts-slack-channel >>
          template: basic_fail_1

  unit_test:
    executor:
      name: hmpps/node
      tag: 14.15-browsers
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test-results/unit-test-reports.html

  integration_test:
    executor: integration-tests
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Install missing OS dependency
          command: sudo apt-get install libxss1
      - run:
          name: Get wiremock
          command: curl -o wiremock.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.1/wiremock-standalone-2.27.1.jar
      - run:
          name: Run wiremock
          command: java -jar wiremock.jar --port 9999
          background: true
      - run:
          name: Run the node app.
          command: npm run start:local
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: integration tests
          command: npm run int-test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration-tests/videos
      - store_artifacts:
          path: integration-tests/screenshots

  build_docker:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create app version string
          command: |
            DATE=$(date '+%Y-%m-%d')
            SHORT_SHA1=$(echo $CIRCLE_SHA1 | cut -c1-7)
            VERSION=${DATE}.${CIRCLE_BUILD_NUM}.${SHORT_SHA1}
            echo "Created version string: ${VERSION}"
            echo "export APP_VERSION=$VERSION" >> $BASH_ENV
      - mem/remember:
          env_var: APP_VERSION
          value: "${APP_VERSION}"
      - run:
          name: Build container image
          command: |
            IMAGE_TAG=<< pipeline.parameters.docker-image-name >>:${APP_VERSION}
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            docker build --pull \
              --rm=false . \
              --build-arg BUILD_NUMBER=$APP_VERSION \
              --build-arg GIT_REF=$CIRCLE_SHA1 \
              --tag "${IMAGE_TAG}" \
              --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
              --label "app.version=${APP_VERSION}" \
              --label "build.version=${APP_VERSION}" \
              --label "build.number=${CIRCLE_BUILD_NUM}" \
              --label "build.url=${CIRCLE_BUILD_URL}" \
              --label "build.gitref=${CIRCLE_SHA1}"
      - run:
          name: Save container image
          command: |
            mkdir -p docker_cache
            docker save ${IMAGE_TAG} -o docker_cache/build_image.tar
      - persist_to_workspace:
          root: ~/app
          paths:
            - docker_cache
      - mem/remember:
          env_var: IMAGE_TAG
          value: "${IMAGE_TAG}"

  publish_docker:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/app
      - run:
          name: Extract saved container image
          command: docker load --input docker_cache/build_image.tar
      - mem/recall:
          env_var: IMAGE_TAG
      - run:
          name: Publish image to repository
          command: |
            docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
            docker tag "${IMAGE_TAG}" "<< pipeline.parameters.docker-image-name >>:latest"
            docker push "${IMAGE_TAG}"
            docker push "<< pipeline.parameters.docker-image-name >>:latest"

  trivy_scan:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/app
      - run:
          name: Extract saved container image
          command: docker load --input docker_cache/build_image.tar
      - mem/recall:
          env_var: IMAGE_TAG
      - run:
          name: Install trivy
          command: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /tmp
      - run:
          name: "Trivy scan for UNKNOWN,LOW,MEDIUM CVEs - informational, WILL NOT fail build"
          command: |
            /tmp/trivy image \
              --exit-code 0 \
              --no-progress \
              --severity UNKNOWN,LOW,MEDIUM \
              --ignore-unfixed \
              "${IMAGE_TAG}"
      - run:
          name: "Trivy scan for HIGH,CRITICAL CVEs - WILL fail build"
          command: |
            /tmp/trivy image \
              --exit-code 100 \
              --no-progress \
              --severity HIGH,CRITICAL \
              --ignore-unfixed \
              "${IMAGE_TAG}"

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
        filters:
          tags:
            ignore: /.*/

      - unit_test:
          requires:
            - build

      - integration_test:
          requires:
            - build

      - hmpps/helm_lint:
          name: helm_lint

      - build_docker

      - trivy_scan:
          requires:
            - build_docker

      - publish_docker:
          requires:
            - trivy_scan
          filters:
            branches:
              only:
                - main

      - hmpps/deploy_env:
          name: deploy_dev
          env: dev
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - helm_lint
            - unit_test
            - integration_test
            - publish_docker

      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: preprod
          context:
            - hmpps-common-vars
            - ppud-replacement-preprod
          requires:
            - request-preprod-approval

      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: prod
          context:
            - hmpps-common-vars
            - ppud-replacement-prod
          requires:
            - request-prod-approval
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>

  security:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - check_outdated:
          context:
            - hmpps-common-vars
      - hmpps/npm_security_audit:
          context:
            - hmpps-common-vars
      - hmpps/veracode_policy_scan:
          context:
            - veracode-credentials
            - hmpps-common-vars
